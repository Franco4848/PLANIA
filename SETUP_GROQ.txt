╔══════════════════════════════════════════════════════════════════════════════╗
║                    CONFIGURACIÓN DE GROQ API - PLANIA                        ║
╚══════════════════════════════════════════════════════════════════════════════╝

✅ IMPLEMENTACIÓN COMPLETADA

Se ha integrado exitosamente Groq LLM en tu aplicación PLANIA con el flujo:
  Filtros → Chat → IA (Groq) → Enriquecimiento (Google Places) → Mapa

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 PASOS PARA INICIAR

1. OBTENER API KEY DE GROQ (GRATIS)
   
   a) Ve a: https://console.groq.com/keys
   b) Crea una cuenta (sin tarjeta de crédito)
   c) Click en "Create API Key"
   d) Copia la key (empieza con "gsk_...")

2. CONFIGURAR BACKEND

   a) Navega a: plania-backend/
   
   b) Crea archivo .env con este contenido:
   
      GOOGLE_PLACES_API_KEY=tu_google_places_api_key_actual
      GROQ_API_KEY=gsk_tu_key_de_groq_aqui
   
   c) Reemplaza "gsk_tu_key_de_groq_aqui" con tu key real

3. INICIAR SERVICIOS

   Terminal 1 (Backend):
   ─────────────────────
   cd plania-backend
   npm run start:dev
   
   Terminal 2 (Frontend):
   ──────────────────────
   cd plania-project
   npm run dev

4. PROBAR LA FUNCIONALIDAD

   a) Abre http://localhost:5173 (o el puerto que use Vite)
   b) Click en pestaña "IA" en la navbar
   c) Configura filtros:
      - Días: 3
      - Presupuesto: $50,000
      - Tipos: Museos, Restaurantes, Parques
   d) Escribe en el chat:
      "Quiero un itinerario cultural y relajado con buena gastronomía"
   e) Click "Generar itinerario"
   f) Verás el itinerario en el panel Y la ruta dibujada en el mapa

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📁 ARCHIVOS CREADOS/MODIFICADOS

Backend (plania-backend/src/):
  ✅ ia/dto/generar-itinerario.dto.ts  - Validación de entrada
  ✅ ia/ia.controller.ts               - Endpoint POST /ia/itinerario
  ✅ ia/ia.service.ts                  - Lógica Groq + enriquecimiento
  ✅ ia/ia.module.ts                   - Módulo NestJS
  ✅ app.module.ts                     - Importa IaModule
  ✅ actividades/actividades.module.ts - Exporta ActividadesService
  ✅ .env.example                      - Template de variables

Frontend (plania-project/src/):
  ✅ services/ia.js                    - Cliente HTTP para /ia/itinerario
  ✅ components/ChatIA.jsx             - Filtros + input de chat
  ✅ components/ItinerarioPanel.jsx    - Visualización por días
  ✅ App.jsx                           - Integración con Mapa
  ✅ App.css                           - Estilos para nuevos componentes

Documentación:
  ✅ INTEGRACION_IA_GROQ.md            - Documentación completa
  ✅ SETUP_GROQ.txt                    - Este archivo

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 FLUJO IMPLEMENTADO

1. Usuario abre pestaña "IA"
2. Selecciona filtros visuales (tipos, presupuesto, días)
3. Escribe descripción del viaje en lenguaje natural
4. Frontend envía a POST /ia/itinerario
5. Backend:
   - Construye system prompt con restricciones
   - Llama a Groq (modelo llama-3.3-70b-versatile)
   - Recibe itinerario en JSON
   - Para cada actividad, busca lugar real en Google Places
   - Construye objeto con destino + waypoints para el mapa
6. Frontend:
   - Muestra itinerario en ItinerarioPanel (por días)
   - Pasa rutaDatos a Mapa.jsx
   - Mapa dibuja ruta con Google Directions
7. Usuario puede:
   - Click en actividad → ver en mapa
   - Click "Regenerar" → volver a filtros/chat

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 EJEMPLOS DE PROMPTS

Viaje cultural:
  "Itinerario de 3 días enfocado en museos, galerías y buena gastronomía.
   Presupuesto alto, preferencia por lugares con historia."

Viaje familiar:
  "2 días para familia con niños, presupuesto moderado. Queremos parques,
   actividades al aire libre y lugares para comer."

Viaje económico:
  "1 día con presupuesto bajo, actividades gratuitas o baratas.
   Parques, plazas y cafeterías económicas."

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔧 TROUBLESHOOTING

❌ Error: "La IA no generó un JSON válido"
   → Groq devolvió formato incorrecto. El service limpia markdown automáticamente.
   → Si persiste, revisar temperature en ia.service.ts (actualmente 0.7)

❌ Error: "No se encontraron lugares"
   → Tipos de filtro muy restrictivos o ubicación sin resultados
   → Ampliar tipos permitidos o ajustar radio en actividades.service.ts (3km)

❌ Ruta no se dibuja en el mapa
   → Verificar GOOGLE_PLACES_API_KEY y que Places API esté habilitada
   → Revisar consola del navegador para errores de Google Maps

❌ Backend no inicia
   → Verificar que .env existe y tiene GROQ_API_KEY válida
   → Ejecutar: npm install (por si falta groq-sdk)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 ESPECIFICACIONES TÉCNICAS

Modelo LLM:        llama-3.3-70b-versatile (Groq)
Temperature:       0.7
Max tokens:        2048
Radio búsqueda:    3 km desde ubicación del usuario
Tipos soportados:  museo, restaurante, parque, cafetería, galería, cine
Formato respuesta: JSON estructurado con días/actividades/presupuesto

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✨ PRÓXIMOS PASOS SUGERIDOS

- Guardar itinerarios en base de datos
- Compartir itinerarios por link
- Exportar a PDF
- Modo editar (cambiar horario, eliminar, reordenar actividades)
- Historial de prompts
- Soporte multiidioma

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 DOCUMENTACIÓN COMPLETA

Lee INTEGRACION_IA_GROQ.md para detalles técnicos completos, ejemplos de API,
y arquitectura del sistema.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

¡Listo para usar! Solo falta agregar tu GROQ_API_KEY en plania-backend/.env
